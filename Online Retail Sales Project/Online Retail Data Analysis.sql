# Starter Queries to Familiarize with Data

-- Display Sample Rows of the Data
SELECT *
FROM transactions
LIMIT 5;

-- Display each column and their respective data types
DESCRIBE transactions;

-- Count number of distinct countries
SELECT COUNT(DISTINCT Country)
FROM transactions
WHERE Country != 'Unspecified'; # filter out undefined countries

-- Count number of distinct Customers
SELECT COUNT(DISTINCT CustomerID)
FROM transactions
WHERE CustomerID != ''; # omit entries where there was no documented CustomerID

-- Count number of distinct purchases made by customers
SELECT COUNT(DISTINCT InvoiceNo) AS number_of_purchases
FROM transactions
WHERE StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT') AND Quantity > 0; # omit invoices that are refunds and miscellaneous transactions that aren't a direct purchase

-- Timeframe for Dataset
SELECT MIN(InvoiceDate) AS earliest_date, MAX(InvoiceDate) as latest_date, DATEDIFF(MAX(InvoiceDate), MIN(InvoiceDate)) AS days
FROM transactions;



## Queries related to Revenue, Cost of Goods Sold, & Net Profit

-- Total Revenue, Cost of Goods Sold, Net Profit
SELECT 
CONCAT('$', ROUND(SUM(Revenue_Generated), 2)) AS Total_Revenue,
CONCAT('$', ROUND(ABS(SUM(COGS)), 2)) AS Total_COGS,
CONCAT('$',ROUND(SUM(Revenue_Generated) - SUM(ABS(COGS)), 2)) AS Total_NetProfit,
CONCAT(ROUND((SUM(Revenue_Generated) / (SUM(Revenue_Generated) + SUM(ABS(COGS)))) * 100, 2), '%') AS Revenue_Contribution_Percentage,
CONCAT(ROUND((SUM(ABS(COGS)) / (SUM(Revenue_Generated) + SUM(ABS(COGS)))) * 100, 2), '%') AS COGS_Contribution_Percentage,
CONCAT(ROUND(((SUM(Revenue_Generated) - SUM(ABS(COGS))) / (SUM(Revenue_Generated) + SUM(ABS(COGS)))) * 100, 2), '%') AS NetProfit_Contribution_Percentage
FROM
    (SELECT 
        SUM(Quantity * UnitPrice) AS Revenue_Generated
    FROM
        transactions
    WHERE
        Quantity > 0 AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT') AND Country != 'Unspecified') AS rev, # omit invoices that are refunds and miscellaneous transactions that aren't purchases
    (SELECT 
        SUM(Quantity * UnitPrice) AS COGS
    FROM
        transactions
    WHERE
        Quantity < 0) AS cogs;

-- Month-to-Month Revenue
SELECT 
    YEAR(InvoiceDate) AS Year, # partition by year (2010 or 2011)
    MONTH(InvoiceDate) AS Month, # partition by month (1-12)
    ROUND(SUM(Quantity * UnitPrice), 2) AS Monthly_Revenue
FROM
    transactions
WHERE
    StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D','DOT') AND Quantity > 0 # omit invoices that are refunds and miscellaneous transactions that aren't a direct purchase
GROUP BY YEAR(InvoiceDate) , MONTH(InvoiceDate)
ORDER BY Year , Month;

 -- Month-to-Month Revenue Generated by each Country and the Cumulative Revenue Generated
SELECT 
    Country, 
    Year,
    Month,
    Monthly_Revenue,
    ROUND(@cumulative := IF(@prev_country = Country, @cumulative + Monthly_Revenue, Monthly_Revenue), 2) AS Cumulative_Revenue,
    @prev_country := Country AS dummy
FROM (
    SELECT 
        Country, 
        YEAR(InvoiceDate) AS Year, 
        MONTH(InvoiceDate) AS Month, 
        SUM(Quantity * UnitPrice) AS Monthly_Revenue
    FROM 
        transactions
    WHERE 
        Country != 'Unspecified' # omit unidentified countries
        AND Quantity > 0 # omit refunds/defective goods/lost goods
        AND StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'D', 'DOT') # omit transactions unrelated to the direct purchase
    GROUP BY 
        Country, 
        Year, 
        Month
    ORDER BY 
        Country, 
        Year, 
        Month
) AS MonthlyRevenue
CROSS JOIN 
    (SELECT @cumulative := 0, @prev_country := NULL) AS vars;
    
-- Month-to-Month Revenue Generated by each Country and Percentage of the Month's Total Revenue Captured by that Country
SELECT 
    t.Country,
    YEAR(t.InvoiceDate) AS Year,
    MONTH(t.InvoiceDate) AS Month,
    ROUND((SUM(t.Quantity * t.UnitPrice) / total_revenue.Total_Revenue) * 100, 2) AS Percent_of_Total_Revenue,
    ROUND(total_revenue.Total_Revenue, 2) AS Total_Revenue_All_Countries
FROM
    transactions t
        JOIN
    (SELECT 
        YEAR(InvoiceDate) AS Year,
            MONTH(InvoiceDate) AS Month,
            SUM(Quantity * UnitPrice) AS Total_Revenue
    FROM
        transactions
    WHERE
        Country != 'Unspecified' # omit unidentified countries
            AND Quantity > 0  # omit refunds/defective goods/lost goods
            AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT') # omit transactions unrelated to the direct purchase
    GROUP BY YEAR(InvoiceDate) , MONTH(InvoiceDate)) AS total_revenue ON YEAR(t.InvoiceDate) = total_revenue.Year
        AND MONTH(t.InvoiceDate) = total_revenue.Month
WHERE
    t.Country != 'Unspecified' # omit unidentified countries
        AND t.Quantity > 0 # omit refunds/defective goods/lost goods
        AND t.StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES','CRUK','S','D','DOT') # omit transactions unrelated to the direct purchase
GROUP BY t.Country , YEAR(t.InvoiceDate) , MONTH(t.InvoiceDate) , total_revenue.Total_Revenue
ORDER BY t.Country , YEAR(t.InvoiceDate) , MONTH(t.InvoiceDate);

-- Total Revenue Generated by each Country throughout Dataset's Timeframe and their Contribution (in percent) to Total Revenue
SELECT 
    Country, 
    ROUND(SUM(Quantity * UnitPrice), 2) AS total_revenue,
    ROUND((SUM(Quantity * UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM transactions WHERE Quantity > 0 AND StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT'))) * 100, 2) AS revenue_percentage
FROM 
    transactions
WHERE 
    Quantity > 0 # omit refunds/defective goods/lost goods
    AND StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
GROUP BY 
    Country
ORDER BY 
    SUM(Quantity * UnitPrice) DESC;
    
## Queries Related to Seasonality 

-- Revenue partitioned by Season and the Percentage of Total Revenue that Season Captures
SELECT 
    CASE
        WHEN (YEAR(InvoiceDate) = 2010) THEN 'Winter'
        WHEN (MONTH(InvoiceDate) = 3 AND DAY(InvoiceDate) >= 20) OR MONTH(InvoiceDate) IN (4, 5) OR (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) <= 20) THEN 'Spring'
        WHEN (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) >= 21) OR MONTH(InvoiceDate) IN (7, 8) OR (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) <= 22) THEN 'Summer'
        WHEN (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) >= 23) OR MONTH(InvoiceDate) IN (10, 11) OR (MONTH(InvoiceDate) = 12 AND DAY(InvoiceDate) <= 20) THEN 'Autumn'
        ELSE 'Winter'
    END AS Season,
    ROUND(SUM(Quantity * UnitPrice), 2) AS Total_Revenue,
    ROUND((SUM(Quantity * UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM transactions WHERE Quantity > 0 
    AND StockCode NOT IN ('M', 'AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'D', 'DOT'))) * 100, 2) AS Percentage_of_Total_Revenue
FROM transactions
WHERE Quantity > 0 AND StockCode NOT IN ('M', 'AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'D', 'DOT')
GROUP BY 
    CASE
        WHEN (YEAR(InvoiceDate) = 2010) THEN 'Winter'
        WHEN (MONTH(InvoiceDate) = 3 AND DAY(InvoiceDate) >= 20) OR MONTH(InvoiceDate) IN (4, 5) OR (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) <= 20) THEN 'Spring'
        WHEN (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) >= 21) OR MONTH(InvoiceDate) IN (7, 8) OR (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) <= 22) THEN 'Summer'
        WHEN (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) >= 23) OR MONTH(InvoiceDate) IN (10, 11) OR (MONTH(InvoiceDate) = 12 AND DAY(InvoiceDate) <= 20) THEN 'Autumn'
        ELSE 'Winter'
    END
ORDER BY 
    Season;
    
-- Top 10 Most Popular Products per Season (based on units sold)
WITH RankedProducts AS (
    SELECT 
        StockCode,
        `Description`,
        CASE
            WHEN (MONTH(InvoiceDate) = 3 AND DAY(InvoiceDate) >= 20) OR (MONTH(InvoiceDate) = 4 OR MONTH(InvoiceDate) = 5) OR (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) < 21) THEN 'Spring'
            WHEN (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) >= 21) OR (MONTH(InvoiceDate) IN (7, 8)) OR (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) <= 22) THEN 'Summer'
            WHEN (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) >= 23) OR (MONTH(InvoiceDate) IN (10, 11)) OR (MONTH(InvoiceDate) = 12 AND DAY(InvoiceDate) <= 20) THEN 'Autumn'
            ELSE 'Winter'
        END AS Season,
        COUNT(*) AS SalesCount,
        ROW_NUMBER() OVER (PARTITION BY 
                                CASE
                                    WHEN (MONTH(InvoiceDate) = 3 AND DAY(InvoiceDate) >= 20) OR (MONTH(InvoiceDate) = 4 OR MONTH(InvoiceDate) = 5) OR (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) < 21) THEN 'Spring'
                                    WHEN (MONTH(InvoiceDate) = 6 AND DAY(InvoiceDate) >= 21) OR (MONTH(InvoiceDate) IN (7, 8)) OR (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) <= 22) THEN 'Summer'
                                    WHEN (MONTH(InvoiceDate) = 9 AND DAY(InvoiceDate) >= 23) OR (MONTH(InvoiceDate) IN (10, 11)) OR (MONTH(InvoiceDate) = 12 AND DAY(InvoiceDate) <= 20) THEN 'Autumn'
                                    ELSE 'Winter'
                                END 
                          ORDER BY COUNT(*) DESC) AS RankNumber
    FROM 
        transactions
    GROUP BY 
        StockCode, `Description`, Season
)
SELECT 
    StockCode, `Description`, Season, SalesCount
FROM 
    RankedProducts
WHERE 
    RankNumber <= 10
ORDER BY 
    Season, RankNumber;



## Queries Investigating Customer Segmentation

-- Top 10 Most Profitable Customers
SELECT CustomerID, ROUND(SUM(Quantity * UnitPrice), 2) AS Revenue_Generated
FROM transactions
WHERE CustomerID != '' AND StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'DOT') # omit miscellaneous transactions but include refunds and discounts
GROUP BY CustomerID
ORDER BY Revenue_Generated DESC
LIMIT 10;

-- Top 10 Highest Average Order Values by Customer
SELECT CustomerID, ROUND(AVG(Quantity * UnitPrice), 2) AS average_order_value
FROM transactions
WHERE CustomerID != '' AND StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'DOT') AND Quantity > 0 # omit miscellaneous transactions and refunds but include discounts
GROUP BY CustomerID
ORDER BY average_order_value DESC
LIMIT 10;

-- Repeat Customers (Top 10 Customers with the most orders placed)
SELECT CustomerID, Country, COUNT(DISTINCT InvoiceNo) AS orders_placed
FROM transactions
WHERE CustomerID != '' AND StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'D', 'DOT') AND Quantity > 0 # omit rows with missing CustomerID info, omit miscellaneous transactions & refunds
GROUP BY CustomerID, Country
ORDER BY orders_placed DESC
LIMIT 10;

-- Top 10 Countries with the Highest Average Order Value
SELECT Country, ROUND(AVG(Quantity * UnitPrice), 2) AS average_order_value
FROM transactions
WHERE StockCode NOT IN ('AMAZONFEE', 'POST', 'BANK CHARGES' ,'CRUK', 'S', 'DOT') AND Quantity > 0 # omit miscellaneous transactions and refunds but include discounts
GROUP BY Country
ORDER BY average_order_value DESC
LIMIT 10;

-- Customer Lifetime Value: CLV = Average Order Value x Purchase Frequency x Average Length of Customer Relationship 
SELECT 
    transactions.CustomerID,
    transactions.Country,
    ROUND(SUM(Quantity * UnitPrice), 2) AS Total_Revenue,
    ROUND(SUM(Quantity * UnitPrice) / Num_Purchases,
            2) AS Average_Order_Value,
    Num_Purchases,
    DATEDIFF(MAX(InvoiceDate), MIN(InvoiceDate)) AS Duration_of_Relationship,
    (365 / (DATEDIFF(MAX(InvoiceDate), MIN(InvoiceDate)))) AS conversion_factor,
    ROUND(Num_Purchases * (365 / DATEDIFF(MAX(InvoiceDate), MIN(InvoiceDate)))) AS Projected_Number_of_Purchases_Per_Year,
    ROUND(1 / ((SELECT 
                    COUNT(*) AS NumberOfConsistentCustomers
                FROM
                    (SELECT 
                        CustomerID, COUNT(DISTINCT InvoiceNo) AS NumInvoices
                    FROM
                        transactions
                    WHERE
                        CustomerID != ''
                            AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
                            AND Quantity > 0
                    GROUP BY CustomerID
                    HAVING NumInvoices > 1) AS Subquery) / ((SELECT 
                    COUNT(*) AS NumberOfConsistentCustomers
                FROM
                    (SELECT 
                        CustomerID, COUNT(DISTINCT InvoiceNo) AS NumInvoices
                    FROM
                        transactions
                    WHERE
                        CustomerID != ''
                            AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
                            AND Quantity > 0
                    GROUP BY CustomerID
                    HAVING COUNT(DISTINCT InvoiceNo) > 1) AS Subquery) + (SELECT 
                    COUNT(*) AS NumberOfOneTimeCustomers
                FROM
                    (SELECT 
                        CustomerID, COUNT(DISTINCT InvoiceNo) AS NumInvoices
                    FROM
                        transactions
                    WHERE
                        CustomerID != ''
                            AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
                            AND Quantity > 0
                    GROUP BY CustomerID
                    HAVING COUNT(DISTINCT InvoiceNo) = 1) AS Subquery))),
            2) AS Average_Customer_Lifespan,
    ROUND((SUM(Quantity * UnitPrice) / Num_Purchases) * (ROUND(Num_Purchases * (365 / DATEDIFF(MAX(InvoiceDate), MIN(InvoiceDate))))) * (ROUND(1 / ((SELECT 
                            COUNT(*) AS NumberOfConsistentCustomers
                        FROM
                            (SELECT 
                                CustomerID, COUNT(DISTINCT InvoiceNo) AS NumInvoices
                            FROM
                                transactions
                            WHERE
                                CustomerID != ''
                                    AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
                                    AND Quantity > 0
                            GROUP BY CustomerID
                            HAVING NumInvoices > 1) AS Subquery) / ((SELECT 
                            COUNT(*) AS NumberOfConsistentCustomers
                        FROM
                            (SELECT 
                                CustomerID, COUNT(DISTINCT InvoiceNo) AS NumInvoices
                            FROM
                                transactions
                            WHERE
                                CustomerID != ''
                                    AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
                                    AND Quantity > 0
                            GROUP BY CustomerID
                            HAVING COUNT(DISTINCT InvoiceNo) > 1) AS Subquery) + (SELECT 
                            COUNT(*) AS NumberOfOneTimeCustomers
                        FROM
                            (SELECT 
                                CustomerID, COUNT(DISTINCT InvoiceNo) AS NumInvoices
                            FROM
                                transactions
                            WHERE
                                CustomerID != ''
                                    AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
                                    AND Quantity > 0
                            GROUP BY CustomerID
                            HAVING COUNT(DISTINCT InvoiceNo) = 1) AS Subquery))),
                    2)),
            2) AS Customer_Lifetime_Value
FROM
    (SELECT 
        CustomerID, COUNT(DISTINCT InvoiceNo) AS Num_Purchases
    FROM
        transactions
    WHERE
        CustomerID != ''
            AND StockCode NOT IN ('AMAZONFEE' , 'POST', 'BANK CHARGES', 'CRUK', 'S', 'D', 'DOT')
            AND Quantity > 0
    GROUP BY CustomerID) AS Subquery
        JOIN
    transactions ON Subquery.CustomerID = transactions.CustomerID
WHERE
    transactions.CustomerID != ''
        AND StockCode NOT IN ('AMAZONFEE' , 'POST',
        'BANK CHARGES',
        'CRUK',
        'S',
        'DOT')
GROUP BY CustomerID , Country
HAVING Num_Purchases > 1
    AND Duration_of_Relationship > 30
ORDER BY Customer_Lifetime_Value DESC
LIMIT 50;